---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: ca-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ca-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit
subjects:
- kind: ServiceAccount
  name: ca-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ca-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ca-operator
  template:
    metadata:
      labels:
        app: ca-operator
    spec:
      tolerations:
        - key: "multi-az-worker"
          operator: "Equal"
          value: "true"
          effect: NoSchedule
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values: ["ca-operator"]
            topologyKey: "kubernetes.io/hostname"
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values: ["ca-operator"]
            topologyKey: "failure-domain.beta.kubernetes.io/zone"
      containers:
      - image: {{ imageFor "cli" }}
        imagePullPolicy: IfNotPresent
        name: ca-operator
        command:
        - /bin/bash
        args:
        - -c
        - |-
          #!/bin/bash
          set -e
          while(true); do
            # Use the internal cluster's kubeconfig to collect router and service CA
            export KUBECONFIG=/etc/kubernetes/kubeconfig/kubeconfig
            if ! oc get cm -n openshift-config-managed router-ca -o jsonpath='{ .data.ca-bundle\.crt }' > /tmp/router.ca; then
               echo "Cannot fetch router-ca yet. Will continue to wait"
               sleep 30
               continue
            fi
            if ! oc get cm -n openshift-config-managed service-ca -o jsonpath='{ .data.ca-bundle\.crt }' > /tmp/service.ca; then
               echo "Cannot fetch service-ca yet. Will continue to wait"
               sleep 30
               continue
            fi
            cat /etc/kubernetes/config/initial-ca.crt /tmp/router.ca /tmp/service.ca > /tmp/kcm.ca
            CHECKSUM="$(python -c "import hashlib;print hashlib.md5(open('/tmp/kcm.ca').read()).hexdigest()")"
            # Switch to the management cluster and apply latest CA
            unset KUBECONFIG
            export KCM_CA="$(cat /tmp/kcm.ca)"
            oc patch cm kube-controller-manager --type=json --patch "[{\"op\": \"replace\", \"path\": \"/data/service-ca.crt\", \"value\":\"${KCM_CA}\"}]"
            oc patch deployment kube-controller-manager  --type=json --patch "[{\"op\": \"replace\", \"path\": \"/spec/template/metadata/annotations\", \"value\":{\"ca-checksum\":\"${CHECKSUM}\"}}]"
            sleep 30
          done
        volumeMounts:
        - mountPath: /etc/kubernetes/kubeconfig
          name: kubeconfig
        - mountPath: /etc/kubernetes/config
          name: config
      restartPolicy: Always
      serviceAccountName: ca-operator
      volumes:
      - name: kubeconfig
        secret:
          secretName: service-network-admin-kubeconfig
      - name: config
        configMap:
          name: ca-operator
