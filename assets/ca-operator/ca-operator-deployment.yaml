---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: ca-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ca-operator
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - patch
- apiGroups: ["extensions", "apps"]
  resources:
  - deployments
  verbs:
  - get
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ca-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ca-operator
subjects:
  - kind: ServiceAccount
    name: ca-operator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ca-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ca-operator
  template:
    metadata:
      labels:
        app: ca-operator
{{ if .RestartDate }}
      annotations:
        openshift.io/restartedAt: "{{ .RestartDate }}"
{{ end }}
    spec:
      tolerations:
        - key: "multi-az-worker"
          operator: "Equal"
          value: "true"
          effect: NoSchedule
      containers:
      - image: {{ imageFor "cli" }}
        imagePullPolicy: IfNotPresent
        name: ca-operator
        command:
        - /bin/bash
        args:
        - -c
        - |-
          #!/bin/bash
          set -e
          while(true); do
            # Use the internal cluster's kubeconfig to collect router and service CA and apply kubelet serving ca configmap
            export KUBECONFIG=/etc/kubernetes/kubeconfig/kubeconfig
          cat > /tmp/kubelet-serving-ca-configmap.json <<EOF
          {
              "apiVersion": "v1",
              "data": {
                "ca-bundle.crt": "$(awk -v ORS='\\n' '1' /etc/kubernetes/config/initial-ca.crt)"
              },
              "kind": "ConfigMap",
              "metadata": {
                    "name": "kubelet-serving-ca",
                    "namespace": "openshift-config-managed"
                }
          }
          EOF
            if ! oc apply -f /tmp/kubelet-serving-ca-configmap.json; then
               echo "Could not apply kubelet serving ca yet. Will continue to wait"
               sleep 30
               continue
            fi
            if ! oc get cm -n openshift-config-managed service-ca -o jsonpath='{ .data.ca-bundle\.crt }' > /tmp/service.ca; then
               echo "Cannot fetch service-ca yet. Will continue to wait"
               sleep 30
               continue
            fi
            include_router_ca=1
            if ! oc get cm -n openshift-config-managed router-ca -o jsonpath='{ .data.ca-bundle\.crt }' > /tmp/router.ca; then
               echo "Router ca is not available. It will not be included in the CA bundle"
               include_router_ca=0
            fi
            if [[ include_router_ca == 1 ]]; then
              cat /etc/kubernetes/config/initial-ca.crt /tmp/router.ca /tmp/service.ca > /tmp/kcm.ca
            else
              cat /etc/kubernetes/config/initial-ca.crt /tmp/service.ca > /tmp/kcm.ca
            fi
            CHECKSUM="$(python -c "import hashlib;print hashlib.md5(open('/tmp/kcm.ca').read()).hexdigest()")"
            # Switch to the management cluster and apply latest CA
            unset KUBECONFIG
          cat > /tmp/patch_ca.json <<EOF
          {
              "apiVersion": "v1",
              "data": {
                "service-ca.crt": "$(awk -v ORS='\\n' '1' /tmp/kcm.ca)"
              },
              "kind": "ConfigMap",
              "metadata": {
                  "name": "kube-controller-manager"
              }
          }
          EOF
            oc patch cm kube-controller-manager --patch "$(cat /tmp/patch_ca.json)"
            oc patch deployment kube-controller-manager  --type=json --patch "[{\"op\": \"replace\", \"path\": \"/spec/template/metadata/annotations\", \"value\":{\"ca-checksum\":\"${CHECKSUM}\"}}]"
            sleep 30
          done
{{ if .CAOperatorResources }}
        resources:{{ range .CAOperatorResources }}{{ range .ResourceRequest }}
          requests: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ range .ResourceLimit }}
          limits: {{ if .CPU }}
            cpu: {{ .CPU }}{{ end }}{{ if .Memory }}
            memory: {{ .Memory }}{{ end }}{{ end }}{{ end }}
{{ end }}
        volumeMounts:
        - mountPath: /etc/kubernetes/kubeconfig
          name: kubeconfig
        - mountPath: /etc/kubernetes/config
          name: config
      restartPolicy: Always
      serviceAccountName: ca-operator
      volumes:
      - name: kubeconfig
        secret:
          secretName: service-network-admin-kubeconfig
      - name: config
        configMap:
          name: ca-operator
